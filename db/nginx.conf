user www;
worker_processes  4;

error_log  /var/log/nginx/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    use kqueue;
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_real_ip"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    tcp_nodelay    on;
    tcp_nopush     on;
    server_tokens off;
    types_hash_max_size 2048;
    client_body_buffer_size 8K;
    client_header_buffer_size 2k;
    client_max_body_size 512k;
    server_names_hash_bucket_size 64;
    server_name_in_redirect off;
    keepalive_timeout  70;
    send_timeout 30s;
    reset_timedout_connection   on;

    #gzip  on;
    server {
            listen      7997;
            server_name  204.45.70.66;
            
#            ssl on;
#            ssl_certificate        /usr/local/etc/nginx/server.crt;
#            ssl_certificate_key    /usr/local/etc/nginx/server.nopass.key;
#            ssl_session_timeout 7m;
#            keepalive_timeout 70;
#            ssl_protocols SSLv2 SSLv3 TLSv1;
#            ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;
#            ssl_prefer_server_ciphers on;

	    location / {
        	root /usr/local/www/stealercp;
        	index index.php;
            }
	    error_page   500 502 503 504  /50x.html;
            location = /50x.html {
        	root   /usr/local/www/nginx-dist;
            }
            location ~ /\.ht {
                deny  all;
            }
            location ~ \.php$ {
                fastcgi_pass unix:/tmp/php-fpm.sock;
                fastcgi_index index.php;
                fastcgi_param SCRIPT_FILENAME /usr/local/www/stealercp$fastcgi_script_name;
                include fastcgi_params;
            }
    }

	server {
		listen 16443;
		access_log  /usr/local/www/0cp/logs/nginx-access.log;
		error_log /usr/local/www/0cp/logs/nginx-error.log;

#		ssl                  on;
#		ssl_certificate      /usr/local/etc/nginx/server.crt;
#		ssl_certificate_key  /usr/local/etc/nginx/server.pem;
#
# 		ssl_session_timeout  5m;
#
#		ssl_protocols  SSLv2 SSLv3 TLSv1;
#		ssl_ciphers  ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;
#		ssl_prefer_server_ciphers   on;

		location = /redis2 {
			internal;
			redis2_raw_queries $args $echo_request_body;
			redis2_pass 127.0.0.1:6379;
		}

		location ~ ^/js/.+\.(js|css|xml|gif|png)$ {
			root /usr/local/www/0cp;
		}

		location ~ ^/css/.+\.css$ {
			root /usr/local/www/0cp;
		}

		location ~ ^/images/.+\.(gif|png)$ {
			root /usr/local/www/0cp;
		}

		location / {
			set $sess_life_time 3600;
			rewrite_by_lua "
			local cook_sessid = ngx.var.cookie_sessid

			if cook_sessid ~= nil and cook_sessid ~= '' then
				local sess_life_time = ngx.var.sess_life_time
				local parser = require 'redis.parser'
			
				-- check keys existing
				local reqs = {
					{'exists','cp_user_' .. cook_sessid},
					{'exists','cp_builds_' .. cook_sessid},
					{'exists','cp_authcn_' .. cook_sessid}
				}
				local raw_reqs = {}
				for i, req in ipairs(reqs) do
					table.insert(raw_reqs, parser.build_query(req))
				end
				local redis_res = ngx.location.capture('/redis2?' .. #reqs, {method=ngx.HTTP_POST,body=table.concat(raw_reqs, '')})
				if redis_res.status ~= 200 or not redis_res.body then
					ngx.log(ngx.ERR, 'failed to query redis')
					ngx.exit(500)
				end
				
				-- update ttl if all keys exits and delete other session keys if one more key not found
				local keysCounter = 0
				local replies = parser.parse_replies(redis_res.body,#reqs)
				for i, result in ipairs(replies) do
					if result[1] == '1' or result[1] == 1 then
						keysCounter = keysCounter + 1
					end
				end
				
				local reqs = {}
				if keysCounter == 3 then
					reqs = {
						{'expire','cp_user_' .. cook_sessid, sess_life_time},
						{'expire','cp_builds_' .. cook_sessid, sess_life_time},
						{'expire','cp_authcn_' .. cook_sessid, sess_life_time}
					}
				else
					reqs = {
						{'del','cp_user_' .. cook_sessid },
						{'del','cp_builds_' .. cook_sessid },
						{'del','cp_authcn_' .. cook_sessid }
					}
				end
				
				-- make request to redis
				raw_reqs = {}
				for i, req in ipairs(reqs) do
					table.insert(raw_reqs, parser.build_query(req))
				end
				redis_res = ngx.location.capture('/redis2?' .. #reqs, {method=ngx.HTTP_POST,body=table.concat(raw_reqs, '')})
				if redis_res.status ~= 200 or not redis_res.body then
					ngx.log(ngx.ERR, 'failed to query redis')
					ngx.exit(500)
				end
			end
	  		";
			
			fastcgi_pass unix:/var/run/fcgiwrap/fcgiwrap.0cp.socket;
			fastcgi_index index.pl;
			fastcgi_param SCRIPT_FILENAME /usr/local/www/0cp/src$fastcgi_script_name;
			fastcgi_param DOCUMENT_ROOT /usr/local/www/0cp/src;
			include fastcgi_params;
		}

		location ~ ^/stealercp/.+\.php$ {
			if ($cookie_sessid = "") {
    				return 403;
			}

			set $cp_builds "";
			set $cp_user "";
			rewrite_by_lua "
			local parser = require 'redis.parser'
			local reqs = {
				{'get','cp_user_' .. ngx.var.cookie_sessid},
				{'get','cp_builds_' .. ngx.var.cookie_sessid}
			}
			local raw_reqs = {}
			for i, req in ipairs(reqs) do
				table.insert(raw_reqs, parser.build_query(req))
			end
			local redis_res = ngx.location.capture('/redis2?' .. #reqs, {method=ngx.HTTP_POST,body=table.concat(raw_reqs, '')})
			if redis_res.status ~= 200 or not redis_res.body then
				ngx.log(ngx.ERR, 'failed to query redis')
				ngx.exit(500)
			end
			local replies = parser.parse_replies(redis_res.body,#reqs)
			for i, result in ipairs(replies) do
				if i == 1 then
					ngx.var.cp_user = result[1]
				elseif i == 2 then
					ngx.var.cp_builds = result[1]
				end
			end
	  		";

			fastcgi_pass unix:/tmp/php-fpm.sock;
			fastcgi_index admin.php;
			fastcgi_param SCRIPT_FILENAME /usr/local/www$fastcgi_script_name;
			fastcgi_param CP_USER_ID $cp_user;
			fastcgi_param CP_ALLOWED_BUILDS $cp_builds;
			include fastcgi_params;
		}
		location ~ ^/stealercp/ {
        		root /usr/local/www;
		}
       }

    server {
	listen 44444;
	
	location = /redis2 {
	    internal;
	    redis2_raw_queries $args $echo_request_body;
	    redis2_pass 127.0.0.1:6379;
	}

	location / {
	   set $cp_builds "";
	   set $cp_user "";
	   rewrite_by_lua "
	    local parser = require 'redis.parser'
	    local reqs = {
		{'get','cp_user_' .. ngx.var.arg_sessid},
		{'get','cp_builds_' .. ngx.var.arg_sessid}
	    }
	    local raw_reqs = {}
	    for i, req in ipairs(reqs) do
		table.insert(raw_reqs, parser.build_query(req))
	    end
	    local redis_res = ngx.location.capture('/redis2?' .. #reqs, {method=ngx.HTTP_POST,body=table.concat(raw_reqs, '')})
	    if redis_res.status ~= 200 or not redis_res.body then
		ngx.log(ngx.ERR, 'failed to query redis')
		ngx.exit(500)
	    end
	    local replies = parser.parse_replies(redis_res.body,#reqs)
	    for i, result in ipairs(replies) do
		if i == 1 then
		    ngx.var.cp_user = result[1]
		elseif i == 2 then
		    ngx.var.cp_builds = result[1]
		end
	    end
	   ";
	    fastcgi_pass unix:/var/run/fcgiwrap/fcgiwrap.0cp.socket;
	    fastcgi_index test.pl;
	    fastcgi_param SCRIPT_FILENAME /usr/local/www/0cp/src/test.pl;
	    fastcgi_param DOCUMENT_ROOT /usr/local/www/0cp/src;
	    fastcgi_param CP_USER_ID $cp_user;
	    fastcgi_param CP_ALLOWED_BUILDS $cp_builds;
	    include fastcgi_params;
	}
    }
}
